import tkinter as tk
import time
import random

root = tk.Tk()
Frame_Width = 800
Frame_Height= 800

root.geometry(f'{Frame_Width}x{Frame_Height}')
canvas=tk.Canvas(root)
canvas.pack()
canvas.config(width=Frame_Width,height=Frame_Height)
root.title('Hunger games')
size=25

class Ball:
    def __init__(self,color,hunter):
        self.color = color
        self.size=random.randint(40,60)
        self.velx=2
        self.vely=2
        self.r=random.randint(0,1)
        if(self.r==0):
            self.vely=-2
        self.p=random.randint(0,1)
        if(self.p==0):
            self.velx=-2
        self.x1=random.randint(50,750)
        self.y1=random.randint(50,750)
        self.x2=self.x1+40
        self.y2=self.y1+40
        self.hunter= hunter

    def makehunter(self,hunter):
        self.hunter=hunter

    def getBallLocation(self):
        return self.x1,self.x2,self.y1,self.y2,self.size

    def ifHunter(self):
        return self.hunter
    
    
    def hit(ball1,ball2):
        ball1x1,ball1x2,ball1y1,ball1y2,ball1s=ball1.getBallLocation()
        ball2x1,ball2x2,ball2y1,ball2y2,ball2s=ball2.getBallLocation()
        size=0
        if(ball1s>=ball2s):
            size=ball1s
        else:
            size=ball2s
        x2_diff=(abs(ball1x2-ball2x2))
        y2_diff=(abs(ball1y2-ball2y2))
     
        if(x2_diff<=ball1s and x2_diff<=ball2s):
            if(y2_diff<=ball1s and y2_diff<=ball2s):
                return True  
        return False
       

    def changecolor(self):
        self.color="Black"
         

    def createball(self):            
            self.x1 = self.x1 + self.velx
            self.y1 = self.y1 + self.vely
            self.x2 = self.x1 + self.size
            self.y2 = self.y1 + self.size
            if (self.y2 > Frame_Height):
                self.vely = -self.vely
            if (self.x2 > Frame_Width):
                self.velx = -self.velx
            if (self.x1 < 0):
                self.velx = -self.velx
            if(self.y1<0):
                self.vely=-self.vely
            return self.x1,self.y1,self.x2,self.y2, self.color
            


class multipleballs():
    def __init__(self):
        self.colors=['Red', 'Orange', 'Yellow', 'Green', 'Blue']
        self.balls=[]
        self.hunter= False
        for i in range(0,15):
            self.r= random.randint(0,4)
            if(i==0):
                self.hunter=True
                ball=Ball('Black',self.hunter)
            else:
                self.hunter=False
                ball=Ball(self.colors[self.r],self.hunter)
            self.balls.append(ball)

    def moveballs(self):
        
        while True:
            canvas.delete('all')
            for i in range(len(self.balls)-1):
                x1,y1,x2,y2,color=self.balls[i].createball()
                if(self.balls[i].ifHunter()==True):
                    canvas.create_rectangle([x1,y1,x2,y2], fill='Black', width=0)
                
                
                for i in range (len(self.balls)):
                    for j in range (len(self.balls)):
                            if(self.balls[i].ifHunter()):
                                if not self.balls[j].ifHunter():
                                    if(Ball.hit(self.balls[i],self.balls[j])):
                                        self.balls[j].changecolor()
                                        self.balls[j].makehunter(True)
                            if(self.balls[j].ifHunter()):
                                if not self.balls[i].ifHunter():
                                    if(Ball.hit(self.balls[j], self.balls[i])):
                                        self.balls[i].changecolor()
                                        self.balls[i].makehunter(True)
                canvas.create_rectangle([x1,y1,x2,y2], fill=color, width=0)
            canvas.update()
            time.sleep(.01)        

    

c = multipleballs()
c.moveballs()












